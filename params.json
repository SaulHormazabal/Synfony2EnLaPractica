{"name":"Synfony2 en la Practica","tagline":"Libro practico sobre el dessarrollo web con el framework Symfony2","body":"Indice\r\n------\r\n\r\n1. Requerimientos\r\n2. Composer.phar\r\n3. Creación del proyecto\r\n4. Creación del VirtualHost\r\n5. Creación de la Base de Datos\r\n6. Configuración de Symfony\r\n7. Nuestro proyecto en Symfony2\r\n8. Creación de Bundles\r\n9. Sistema de Usuario con FosUserBundle\r\n\r\n\r\n\r\nRequerimientos\r\n--------------\r\n\r\n* Apache2 con el módulo mod_rewrite habilitado\r\n* PHP 5.3.3 o superior y especificar date.timezone en php.ini\r\n* JSON habilitado\r\n* MySql\r\n* cURL\r\n* GIT\r\n\r\nSi bien el listado de requerimientos puede parecer extenso, no son cosas de otro mundo, o que requieran una compleja configuración, y en muchos casos bastará tener sólo una noción para poder comenzar.\r\n\r\nTambién se debe considerar el uso de un Sistema Operativo similar al de producción. En concreto se ha ocupado Ubuntu para este desarrollo.\r\n\r\n\r\n\r\nComposer.phar\r\n-------------\r\n\r\nComposer es un administrador de dependencias en PHP, este se encargara de resolver cada una de forma inteligente, liberándonos de esta tarea que suele ser muy tediosa.\r\n\r\nPara su utilización descargaremos composer, ubicando el archivo en la carpeta “/usr/bin” para una disponibilidad en todo el sistema.\r\n\r\n\t$ curl -s https://getcomposer.org/installer | sudo php -- --install-dir=/usr/bin\r\n\r\n\r\n\r\nCreación del proyecto\r\n---------------------\r\n\r\nAhora creamos el proyecto, donde \"microtip\" se refiere al nombre que le daremos, y los numero finales a la versión de Symfony2 que ocuparemos. \r\n\r\nEl proyecto debe estar en  una carpeta del servidor, por defecto es /var/www, aunque yo recomiendo habilitar carpetas public_html en el home de los usuarios y servir hay el proyecto y adicionalmente crear un virtualhost.\r\n\r\n\t$ mkdir -p ~/public_html\r\n\t$ cd ~/public_html\r\n\t$ composer.phar create-project symfony/framework-standard-edition microtip/ 2.3.1\r\n\r\n\r\n\r\nCreación del VirtualHost\r\n------------------------\r\n\r\nPrimero debemos cambiarnos a root.\r\n\r\n\t$ sudo -s\r\n\r\n\r\nAgregamos el nombre que le damermos al VirtualHost editando el archivo hosts.\r\n\r\n\t$ nano /etc/hosts\r\n\r\n\r\nEn este archivo debemos incluir el nombre que le daremos a nuestro VirtualHost bajo la linea 127.0.0.1 localhost. Nosotros ocuparemos “microtip” , pero puede ser el que tu quieras.\r\n\r\n\t$ 127.0.0.1       microtip\r\n\r\n\r\nAhora necesitamos hacer las configuraciones, cambiandonos de directorio, creamos el archivo y agregar el nombre del Virtual Host y la ruta de nuestro proyecto.\r\n\r\n\t$ cd /etc/apache2/site-available\r\n\t$ nano microtip\r\n\r\n\r\nNuestro archivo debiese quedar así:\r\n\r\n\t<VirtualHost *:80>\r\n\t        ServerAdmin saul.hormazabal@gmail.com\r\n\t        ServerName microtip\r\n\t        DocumentRoot /home/sahch/public_html/microtip\r\n\t        <Directory /home/sahch/public_html/microtip/>\r\n\t                Options Indexes FollowSymLinks MultiViews\r\n\t                AllowOverride All\r\n\t           \t    Order allow,deny\r\n\t                allow from all\r\n\t        </Directory>\r\n\t        ErrorLog ${APACHE_LOG_DIR}/error.log\r\n\t        LogLevel warn\r\n\t        CustomLog ${APACHE_LOG_DIR}/access.log combined\r\n\t</VirtualHost>\r\n\r\n\r\nAhora solo queda habilitarlo, reiniciar apache y volver a nuestro usuario.\r\n\r\n\t$ a2ensite microtip\r\n\t$ service apache2 reload\r\n\t$ exit\r\n\r\n\r\n\r\nCreación de la Base de Datos\r\n----------------------------\r\n\r\nPrácticamente todos los proyectos hacen uso de una Base de Datos, nosotros ocuparemos MySql, pero puede ser cualquier otra base de datos relacional siempre que tengan instalado el driver.\r\n\r\n\t$ mysql -u root -p\r\n\t> CREATE DATABASE microtip;\r\n\r\n\r\nEn este caso hemos llamado a la base de Datos \"microtip\", pero puede ser el nombre que tu quieras.\r\n\r\n\r\n\r\nConfiguración de Symfony\r\n------------------------\r\n\r\nYa estamos por terminar. Modificamos el propietario de los archivos y asignamos permisos a las carpetas \"cache\" y \"logs\".\r\n\r\n\t$ cd ~/public_html/microtip\r\n\t$ chown -R TU-USUARIO:www-data  *\r\n\t$ chmod 777 -R app/cache app/logs\r\n\r\n\r\nAhora abrimos nuestro navegador favorito y escribimos el nombre de nuestro Virtual Host y le agregamos al final \"/config.php\".\r\n\r\n\thttp://microtip/config.php\r\n\r\n\r\nSi está todo bien, podremos continuar con la configuración completando el formulario de la Base de Datos.\r\n\r\nYa con los datos listos de la Base de Datos generamos una clave secreta .\r\n\r\nY listo, se genera el archivo de configuración \"parameters.yml\", si hemos dado los permisos adecuados se escribirá automáticamente, si no, nos alertara de esto, pero podemos copiar el texto y editar nosotros mismos el archivo.\r\n\r\nAhora podemos acceder al entorno de desarrollo, accesible solo desde local poniendo \"app_dev.php\".\r\n\r\n\thttp://microtip/app_dev.php\r\n\r\n\r\n\r\nNuestro proyecto en Symfony2\r\n----------------------------\r\n\r\nPara el propósito de este libro crearemos un sistema de tips o micro tutoriales, el cual contempla los siguiente:\r\n\r\nUsuarios\r\nTips\r\nEtiquetas\r\n\r\nLos usuarios podrán registrarse, iniciar sesión, editar su perfil y contraseña, además de poder crear tips, editarlos y eliminar, siempre y cuando sean ellos los creadores. Las etiquetas serán creadas o enlazadas al crear o editar un tip, los que deberán ser accesibles por cualquier persona, ya sea que haya iniciado sesión o no, y solo podrán ser editados por sus creadores.\r\n\r\n\r\n\r\nCreación de Bundles\r\n-------------------\r\n\r\nLos bundles son paquetes que mantienen el orden de nuestro proyecto, además nos permiten utilizarlos en posteriores desarrollos, ahorrándonos líneas de código. Así que crearemos 3 bundles de forma interactiva en la consola de Symfony2 ejecutando el siguiente comando:\r\n\r\n\t$ php app/console generate:bundle\r\n\r\n\r\nSe nos irán haciendo preguntas, pero solo necesitamos completar dos cosas: \"Bundle namespace\" y \"Configuration format\".\r\n\r\nPara \"Configuration format\" pondremos en los 3 casos \"yml\".\r\n\r\n\t$ Configuration format (yml, xml, php, or annotation) [annotation]: yml\r\n\r\n\r\nEl namespace de los tres bundles serán \"Sahch/UserBundle\", \"Sahch/TipBundle\" y \"Sahch/TagBundle\".\r\n\r\n\tBundle namespace: Sahch/UserBundle\r\n\tBundle namespace: Sahch/SahchTipBundle\r\n\tBundle namespace: Sahch/TagBundle\r\n\r\n\r\n\r\nSistema de Usuario con FosUserBundle\r\n------------------------------------\r\n\r\nEste es un bundle generado por la comunidad “Friends Of Symfony” (FOS) el cual nos brinda la mayoría de las funcionalidades deseadas en un sistema de usuarios como el registro, verificación de correo, inicio de sesión, edición de perfil, cambio de contraseña, etc.\r\n\r\nPrimero debemos habilitar la traducción en el archivo “config.yml” ubicado en “app/config/” descomentando la línea “translator”, borrando el signo “#” del comienzo, quedando de la siguiente forma.\r\n\r\n    framework:\r\n        translator: ~\r\n\r\n\r\nAhora es necesario cambiar el idioma a español en el archivo “parameters.yml” ubicado en “app/config/” de la siguiente forma.\r\n\r\n        locale:            es\r\n\r\n\r\nAgregamos FosUserBundle al archivo “composer.json”.\r\n\r\n    {\r\n        \"require\": {\r\n            \"friendsofsymfony/user-bundle\": \"*\"\r\n        }\r\n    }\r\n\r\n\r\nAhora lo descargamos usando “composer.phar” con la siguiente línea de comando:\r\n\r\n    composer.phar update\r\n\r\n\r\nLo siguiente es agregar el nuevo bundle al kernel en el archivo “AppKernel.php” en “app/”.\r\n\r\n    <?php\r\n    \r\n    public function registerBundles() {\r\n        $bundles = array(\r\n            // ...\r\n            new FOS\\UserBundle\\FOSUserBundle(),\r\n        );\r\n    }\r\n\r\n\r\nLas entidades son la abstracción de las tablas de la base de datos, las cuales se representan como una clases php, en las cuales realizaremos las especificaciones técnicas a través de comentarios.\r\n\r\nA continuación crearemos una carpeta llamada “Entity” en “src/Sahch/UserBundle”.\r\n\r\n    mkdir src/Sahch/UserBundle/Entity\r\n\r\n\r\nY en esta carpeta creamos el archivo “User.php” con el siguiente contenido:\r\n    \r\n    <?php\r\n    \r\n    namespace Sahch\\UserBundle\\Entity;\r\n    \r\n    use FOS\\UserBundle\\Entity\\User as BaseUser;\r\n    use Doctrine\\ORM\\Mapping as ORM;\r\n    \r\n    /**\r\n     * @ORM\\Entity\r\n     * @ORM\\Table(name=\"fos_user\")\r\n     */\r\n    class User extends BaseUser {\r\n    \r\n        /**\r\n         * @ORM\\Id\r\n         * @ORM\\Column(type=\"integer\")\r\n         * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n         */\r\n        protected $id;\r\n    \r\n        public function __construct() {\r\n            parent::__construct();\r\n        }\r\n    }\r\n\r\nCambiamos el contenido del archivo “security.yml” en “app/config/” por este:\r\n\r\n    security:\r\n        encoders:\r\n            FOS\\UserBundle\\Model\\UserInterface: sha512\r\n\r\n        role_hierarchy:\r\n            ROLE_ADMIN:       ROLE_USER\r\n            ROLE_SUPER_ADMIN: ROLE_ADMIN\r\n\r\n        providers:\r\n            fos_userbundle:\r\n                id: fos_user.user_provider.username_email\r\n\r\n        firewalls:\r\n            main:\r\n                pattern: ^/\r\n                form_login:\r\n                    provider: fos_userbundle\r\n                    csrf_provider: form.csrf_provider\r\n                logout:       true\r\n                anonymous:    true\r\n\r\n        access_control:\r\n            - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }\r\n            - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }\r\n            - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }\r\n            - { path: ^/admin/, role: ROLE_ADMIN }\r\n\r\n\r\nIncorporamos las especificaciones de configuración de FosuserBundle al final del archivo “config.yml” en “app/config/”.\r\n\r\n    fos_user:\r\n        db_driver: orm\r\n        firewall_name: main\r\n        user_class: Sahch\\UserBundle\\Entity\\User\r\n\r\nY para terminar con el sistema de usuario agregamos las rutas al archivo“routing.yml” en “app/config/”.\r\n\r\n    fos_user_security:\r\n        resource: \"@FOSUserBundle/Resources/config/routing/security.xml\"\r\n\r\n    fos_user_profile:\r\n        resource: \"@FOSUserBundle/Resources/config/routing/profile.xml\"\r\n        prefix: /profile\r\n\r\n    fos_user_register:\r\n        resource: \"@FOSUserBundle/Resources/config/routing/registration.xml\"\r\n        prefix: /register\r\n\r\n    fos_user_resetting:\r\n        resource: \"@FOSUserBundle/Resources/config/routing/resetting.xml\"\r\n        prefix: /resetting\r\n\r\n    fos_user_change_password:\r\n        resource: \"@FOSUserBundle/Resources/config/routing/change_password.xml\"\r\n        prefix: /profile\r\n\r\n\r\nAhora solo queda generar la tabla en la base de datos a partir de la entidad de usuario con la siguiente línea de comandos:\r\n\r\n    $ php app/console doctrine:schema:update --force\r\n\r\n\r\nAhora comprobaremos que todo esté funcionando bien, asi que primero limpiamos la cache para los entornos de desarrollo y producción y daremos los permisos correspondientes.\r\n\r\n    $ php app/console cache:clear\r\n    $ php app/console cache:clear --env=prod\r\n    $ chmod 777 -R app/cache\r\n\r\nAhora podemos ingresar al sistema de usuarios en las siguientes direcciones:\r\n\r\n\r\n| URL                        | Descripción                             |\r\n| :-------------------------:| ---------------------------------------:|\r\n| Inicio de sesión           | http://microtip/login                   |\r\n| Formulario de registro     | http://microtip/register/               |\r\n| Perfil de usuario          | http://microtip/profle                  |\r\n| Editar perfil              | http://microtip/profile/edit            |\r\n| Cambiar contraseña         | http://microtip/profile/change-password |\r\n| Recuperación de contraseña | http://microtip/resetting/request       |\r\n| Cerrar sesión              | http://microtip/logout                  |\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}